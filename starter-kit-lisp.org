#+TITLE: Starter Kit Lisp
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Lisp
  :PROPERTIES:
  :tangle:   yes
  :comments: noweb
  :noweb:    yes
  :END:

Support for editing list dialects including [[* Emacs Lisp][Emacs Lisp]], [[* Scheme][Scheme]],
[[* Common Lisp][Common Lisp]], and [[* Clojure][Clojure]].

** Starter boilerplate for elisp file
We want generated .el file to conform to emacs-lisp programming
standards and contain any needed copyright info. It should pass elint.

#+begin_src emacs-lisp
  ;;; starter-kit-lisp.el --- set up modes for Lisp programming
  ;; This file is part of Emacs starter kit.

  ;; Copyright (c) 

  ;; Author: 
  ;; Version:
  ;; Keywords:

  ;; This file is NOT part of GNU Emacs.

  ;; starter-kit-lisp.el is free software: you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation, either version 3 of the
  ;; License, or (at your option) any later version.

  ;; starter-kit-lisp.el is distributed in the hope that it will be
  ;; useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  ;; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with starter-kit-lisp.el.  If not, see
  ;; <http://www.gnu.org/licenses/>.

  ;;---------------------------------------------------------------------------
  ;;
  ;;; Commentary:
  ;;

  ;;; Code:

#+end_src

** Declare external variables and functions
This is done to make the generated elisp file elint-clean. This in
turns means that when elint finds a problem, we can assume it's a real
problem, and not just "par for the course" with emacs-lisp
programs. The tool is only useful if you don't get swamped with false
positives.

These are also useful if an expected package is not, in fact,
installed.

#+begin_src emacs-lisp
  (require 'package)
  (require 'cl-lib)

  ;; package won't be initialized if we're compiling
  (eval-when-compile (package-initialize))

  (declare-function starter-kit-install-if-needed "starter-kit" (&rest packages))
  (declare-function run-starter-kit-coding-hook "starter-kit-defuns" ())
  (declare-function smartparens-mode "smartparens" (&optional arg))
  (declare-function smartparens-strict-mode "smartparens" (&optional arg))
  (declare-function sp-use-paredit-bindings "smartparens" ())
  (declare-function form-feed-mode "form-feed" (&optional arg))
  (declare-function slime "slime" (&optional command coding-system))

  (starter-kit-install-if-needed 'smartparens)
  ;; (starter-kit-install-if-needed 'clojure-mode)
  (starter-kit-install-if-needed 'form-feed)

  (require 'smartparens-config)
  ;; (require 'clojure-mode)

  (defvar read-expression-map)  ;; defined in simple.el
  ;; (defvar starter-kit-clojure-trace-face) ;; starter-kit-clojure.org
  (defvar slime-lisp-implementations) ;; slime.el
  (defvar swank-clojure-binary) ;; slime.el
  (defvar swank-clojure-jar-path) ;; slime.el
  (defvar swank-clojure-extra-classpaths) ;; slime.el
  (defvar slime-lisp-implementations) ;; slime.el
  (defvar slime-lisp-implementations) ;; slime.el
  (defvar ffip-patterns) ;;find-file-in-project.el
  (defvar swank-clojure-extra-vm-args) ;; ???

  ;; more functions 
  ;; sp-wrap-region-init
  ;; sp-wrap-region
  ;; sp-insert-pair
  ;; sp-skip-closing-pair
  ;; smartparens-mode
  ;; smartparens-strict-mode
  ;; sp-use-paredit-bindings
  ;; slime
  ;; run-starter-kit-coding-hook
  ;; swank-clojure-cmd

#+end_src

** Define keys
   :PROPERTIES:
   :CUSTOM_ID: keys
   :END:
#+name: starter-kit-define-lisp-keys
#+begin_src emacs-lisp 
  (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
  ;; (define-key lisp-mode-shared-map (kbd "C-c l") "lambda")
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
  (define-key lisp-mode-shared-map (kbd "C-\\") 'lisp-complete-symbol)
  (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)
#+end_src

** Smartparens
   :PROPERTIES:
   :CUSTOM_ID: paredit
   :END:
[[https://github.com/Fuco1/smartparens/wiki][Smartparens]] is a newer package that replaces paredit and a number of
other related packages. If you're used to paredit, check out the wiki
page on [[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][Paredit and SmartParens]].


Smartparens might seem weird at first, but it really makes writing
lisp a much more comfortable experience.  This is especially useful in
combination with the sexp movement functions (=C-M-f= forward, =C-M-b=
back, =C-M-u= up, =C-M-d= down)


#+begin_src emacs-lisp
  ;;smartparens-config is smartparens + default configuration
  (defun turn-on-smartparens ()
    (smartparens-mode +1)
    ;; also emulate paredit's refusal to delete one delimiter in a pair
    (smartparens-strict-mode +1)
    ;; I find paredit bindings more convenient w/PC keyboards
    (sp-use-paredit-bindings))

#+end_src

** form-feed-mode
A wonderfully simple package to turn ^L characters into horizontal
lines.

#+begin_src emacs-lisp
  (defun turn-on-form-feed ()
    (form-feed-mode 1))
#+end_src

** Non-obtrusive parenthesis faces
   :PROPERTIES:
   :CUSTOM_ID: parenthesis-faces
   :END:
#+begin_src emacs-lisp
  (defface starter-kit-paren-face
     '((((class color) (background dark))
        (:foreground "grey50"))
       (((class color) (background light))
        (:foreground "grey55")))
     "Face used to dim parentheses."
     :group 'starter-kit-faces)
#+end_src

** SLIME
Make sure [[http://common-lisp.net/project/slime/][SLIME]] (Superior Lisp Interaction Mode for Emacs) is
available.

#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'slime)
#+end_src

*** SLIME setup

#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/usr/bin/sbcl")
#+END_SRC

** Emacs Lisp
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp
   :END:

*** Cleanup function for .elc files
#+begin_src emacs-lisp
  (defun starter-kit-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))
#+end_src

*** emacs-list-mode-hook
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook (lambda () (eldoc-mode +1)))
  (add-hook 'emacs-lisp-mode-hook #'run-starter-kit-coding-hook)
  (add-hook 'emacs-lisp-mode-hook #'starter-kit-remove-elc-on-save)
  (add-hook 'emacs-lisp-mode-hook #'turn-on-form-feed)

  ;; (define-key emacs-lisp-mode-map (kbd "C-c v") #'eval-buffer)
  ;; for indentation, use spaces, not tabs
  (defun turn-off-indent-tabs ()
    (setq indent-tabs-mode nil))
  (add-hook 'emacs-lisp-mode-hook #'turn-off-indent-tabs)
#+end_src

*** font-lock setup
#+begin_src emacs-lisp
  (font-lock-add-keywords 'emacs-lisp-mode
                          '(("(\\|)" . 'starter-kit-paren-face)))
#+end_src

** Clojure
   :PROPERTIES:
   :CUSTOM_ID: clojure
   :END:

#+begin_src emacs-lisp
  ;; (starter-kit-install-if-needed 'clojure-mode)
#+end_src

#+begin_src emacs-lisp
  ;; (add-hook 'clojure-mode-hook 'run-starter-kit-coding-hook)

  ;; (font-lock-add-keywords 'clojure-mode
  ;;                         '(("(\\|)" . 'starter-kit-paren-face)))

  ;; (define-key clojure-mode-map (kbd "C-c v") 'slime-eval-buffer)
  ;; (define-key clojure-mode-map (kbd "C-c C-v") 'slime-eval-buffer)

  ;; (defface starter-kit-clojure-trace-face
  ;;    '((((class color) (background dark))
  ;;       (:foreground "grey50"))
  ;;      (((class color) (background light))
  ;;       (:foreground "grey55")))
  ;;    "Face used to dim parentheses."
  ;;    :group 'starter-kit-faces)

  ;; (setq starter-kit-clojure-trace-face 'starter-kit-clojure-trace-face)

  ;; ;; This will make relevant lines stand out more in stack traces
  ;; (defun sldb-font-lock ()
  ;;   (font-lock-add-keywords nil
  ;;                           '(("[0-9]+: \\(clojure\.\\(core\\|lang\\).*\\)"
  ;;                              1 starter-kit-clojure-trace-face)
  ;;                             ("[0-9]+: \\(java.*\\)"
  ;;                              1 starter-kit-clojure-trace-face)
  ;;                             ("[0-9]+: \\(swank.*\\)"
  ;;                              1 starter-kit-clojure-trace-face)
  ;;                             ("\\[\\([A-Z]+\\)\\]"
  ;;                              1 font-lock-function-name-face))))

  ;; (add-hook 'sldb-mode-hook 'sldb-font-lock)

  ;; (defun slime-jump-to-trace (&optional on)
  ;;   "Jump to the file/line that the current stack trace line references.
  ;; Only works with files in your project root's src/, not in dependencies."
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (beginning-of-line)
  ;;     (search-forward-regexp "[0-9]: \\([^$(]+\\).*?\\([0-9]*\\))")
  ;;     (let ((line (string-to-number (match-string 2)))
  ;;           (ns-path (split-string (match-string 1) "\\."))
  ;;           (project-root (locate-dominating-file default-directory "src/")))
  ;;       (find-file (format "%s/src/%s.clj" project-root
  ;;                          (mapconcat 'identity ns-path "/")))
  ;;       (goto-char (point-min))
  ;;       (forward-line line))))

  (eval-after-load 'slime
    '(progn
       ;; (defalias 'sldb-toggle-details 'slime-jump-to-trace)
       ;; ^ see https://github.com/eschulte/emacs24-starter-kit/issues/68
       (defun sldb-prune-initial-frames (frames)
         "Show all stack trace lines by default."
         frames)))

  (eval-after-load 'find-file-in-project
    '(add-to-list 'ffip-patterns "*.clj"))

  ;; (defun clojure-project (path)
  ;;   "Setup classpaths for a clojure project and starts a new SLIME session.

  ;; Kills existing SLIME session, if any."
  ;;   (interactive (list
  ;;                 (ido-read-directory-name
  ;;                  "Project root: "
  ;;                  (locate-dominating-file default-directory "pom.xml"))))
  ;;   (when (get-buffer "*inferior-lisp*")
  ;;     (kill-buffer "*inferior-lisp*"))
  ;;   (add-to-list 'swank-clojure-extra-vm-args
  ;;                (format "-Dclojure.compile.path=%s"
  ;;                        (expand-file-name "target/classes/" path)))
  ;;   (setq swank-clojure-binary nil
  ;;         swank-clojure-jar-path (expand-file-name "target/dependency/" path)
  ;;         swank-clojure-extra-classpaths
  ;;         (append (mapcar (lambda (d) (expand-file-name d path))
  ;;                         '("src/" "target/classes/" "test/"))
  ;;                 (let ((lib (expand-file-name "lib" path)))
  ;;                   (if (file-exists-p lib)
  ;;                       (directory-files lib t ".jar$"))))
  ;;         slime-lisp-implementations
  ;;         (cons (if (fboundp 'swank-clojure-cmd)
  ;;                   `(clojure ,(swank-clojure-cmd) :init swank-clojure-init))
  ;;               (cl-remove-if #'(lambda (x) (eq (car x) 'clojure))
  ;;                          slime-lisp-implementations)))
  ;;   (save-window-excursion
  ;;     (slime)))

#+end_src

#+results:
: clojure-project

pretty \lambda's in clojure
#+begin_src emacs-lisp
  ;; (eval-after-load 'clojure-mode
  ;;   '(font-lock-add-keywords
  ;;     'clojure-mode `(("(\\(fn\\>\\)"
  ;;                      (0 (progn (compose-region (match-beginning 1)
  ;;                                                (match-end 1) "ƒ")
  ;;                                nil))))))
#+end_src

** Scheme
   :PROPERTIES:
   :CUSTOM_ID: scheme
   :END:

#+begin_src emacs-lisp
  (add-hook 'scheme-mode-hook 'run-starter-kit-coding-hook)
  ;; (add-hook 'scheme-mode-hook 'idle-highlight)
  (font-lock-add-keywords 'scheme-mode
                          '(("(\\|)" . 'starter-kit-paren-face)))
#+end_src

** Common Lisp
   :PROPERTIES:
   :CUSTOM_ID: common-lisp
   :END:

#+begin_src emacs-lisp
  (add-hook 'lisp-mode-hook 'run-starter-kit-coding-hook)
  ;; (add-hook 'lisp-mode-hook 'idle-highlight)
  (add-hook 'lisp-mode-hook 'turn-on-smartparens)
  (font-lock-add-keywords 'lisp-mode
                          '(("(\\|)" . 'starter-kit-paren-face)))
#+end_src

** End boilerplate for elisp file
#+begin_src emacs-lisp
  (provide 'starter-kit-lisp)
  ;;; starter-kit-lisp ends here
#+end_src
