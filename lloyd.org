#+TITLE: A. Lloyd Flanagan User-Specific Settings
#+OPTIONS: toc:2 num:nil ^:nil

* Emacs Setup and Initialization
  :PROPERTIES:
  :tangle:   yes
  :comments: noweb
  :noweb:    yes
  :END:

This file is loaded by starter-kit during execution of
`after-init-hook`. It contains setup of options and packages which are
specific to this user, and not necessarily broadly applicable.

** Declare external functions
To make compiler happy, declare functions defined in other files.

#+name external-functions
#+begin_src emacs-lisp
  (declare-function starter-kit-install-if-needed "starter-kit" (&rest packages))
  (declare-function starter-kit-load "starter-kit" (file &optional header-or-tag))
  (declare-function secret-data-get-key "secret-data"  (some-key &optional file-name))
  ;; (declare-function smex-initialize "smex" nil)
  (declare-function flycheck-mode "flycheck" (&optional arg))
  (declare-function pretty-symbols-mode "pretty-symbols" (&optional arg))
  (defvar starter-kit-dir)
  ;;  ido-ubiquitous-mode

#+end_src

** Setup debug-on-error for my customizations
#+begin_src emacs-lisp
  (defvar lloyd-org-orig-debug-on-error debug-on-error
    "Stores locally value of `debug-on-error' so that it may be restored.")
  (setq debug-on-error t)

#+end_src

** Install additional packages
There are a whole bunch of packages I use which may not be useful to
everybody.

*** TODO check for local install of arduino-mode and install from package if not present.

#+name: my-installed-packages
#+begin_src emacs-lisp
  (defconst lloyds-installed-packages
    '(
      ;;async ;; Asynchronous processing in Emacs
      coffee-fof ;; A coffee-mode configuration for `ff-find-other-file'.
      coffee-mode ;; Major mode to edit CoffeeScript files in Emacs
      ;;creole ;; for emacswiki
      ;;creole-mode ;; a markup mode for creole
      dash ;; essential functional programming lib
      dash-functional ;; Collection of useful combinators for Emacs Lisp
      dropdown-list ;; Drop-down menu interface
      ;; e2wm  ;; emacs window manager -- somewhat experimental
      elpy ;; Emacs Python Development Environment
      ;;el-spice ;; extra functions -- TODO: fix key overlaps
      ;;emr ;; Emacs refactoring system.
      ;;exec-path-from-shell ;; utility funcs to get environment variables
      ;;expand-region ;; expand selected region semantically
      f  ;; file system utilities
      ;;form-feed  ;; diplay ^L characters as horizontal line
      flycheck
      golden-ratio ;; resize windows, aesthetically
      ipretty ;; interactive lisp pretty-print
      irfc  ;; look up IETF RFCs and display in buffer
      js2-mode ;; improved JavaScript support
      json-mode
      kv ;; should be specified by pinboard, but isn't
      literate-coffee-mode
      markdown-mode
      ;;org-bullets ;; replace bullets with pleasing UTF-8 chars
      org-toc ;;table of contents for org-mode
      paradox ;; enhanced package listing, future std.
      ;;pinboard ;; display pinboard entries in buffer
      ;;pinboard-api ;; call pinboard API from emacs lisp
      pony-mode ;; django-admin interaction (nice)
      s  ;; The long lost Emacs string manipulation library.
      seq  ;; functions to manipulate sequences of multiple types
      ;; smartparens is also loaded by starter-kit-lisp, but I do setup in
      ;; this file so it has to install earlier.
      smartparens
      ;; smex  ;; M-x interface with Ido-style fuzzy matching.

      ;;thingatpt+
      undo-tree ;; Treat undo history as a tree (very nice)
      web ;; useful HTTP client
      web-beautify ;; Format HTML, CSS and JavaScript/JSON by js-beautify
      web-mode) ;; major mode for editing html templates
    "The set of packages to be automatically installed for me."
    )

  (mapc 'starter-kit-install-if-needed
        lloyds-installed-packages)
#+end_src

** Windows-specific setup
  :PROPERTIES:
  :CUSTOM_ID: windows-specific
  :END:

#+name: windows-specific-setup
#+begin_src emacs-lisp
  ;; html-mode fails on windows if sgml-mode not already present
  (when (equal system-type 'windows-nt)
    (require 'sgml-mode))

#+end_src

** Activate optional parts of starter-kit

#+begin_src emacs-lisp
  (starter-kit-load "eshell")
  ;; starter-kit-js.org still refers to js-mode as "espresso", not valid
  ;; for later versions of emacs
  ;; (starter-kit-load "js")
  (starter-kit-load "nodejs")
  (starter-kit-load "lisp")
  (starter-kit-load "misc-recommended")
  (starter-kit-load "org")
#+end_src

** Setup functions
These functions set up various aspects of the system.

*** Enable undo-tree globally
#+begin_src emacs-lisp
  (defun set-up-global-undo-tree ()
    "Enable `undo-tree` mode wherever it makes sense."
    (when (functionp 'global-undo-tree-mode)
      (global-undo-tree-mode)))

#+end_src

*** Start emacs server process if not already started
#+begin_src emacs-lisp
  (require 'server)
  (defun start-server-if-none ()
    "Start the server processes, unless another process already has."
    ;; test copied from server.el
    (let ((file (expand-file-name "server"
                                  (if server-use-tcp
                                      server-auth-dir
                                    server-socket-dir))))
      (if (not (file-exists-p file))
          (server-start))))
#+end_src

*** Macro to catch errors, turn them into messages
This macro is used to run a function, and catch any errors and display
them as messages. The motivation is that a startup function that
errors may prevent proper startup of emacs, or visiting a file, or
switching to a major mode.

#+begin_src emacs-lisp
  (defmacro error-into-message (body)
    "Catch error in BODY, write message."
    `(condition-case-unless-debug err-data
         ,body
       ;; extract most useful info from err-data structure
       (error  (message "[init] failure! type %s, msg %s in %s."
                          (car err-data)
                          (cdr err-data)
                          (car ',body)))))
#+end_src

*** Load constants and set up keys
#+begin_src emacs-lisp
  (defun set-up-constants ()
    (require 'constants (expand-file-name "constants.el" starter-kit-dir))
    ;;
    (autoload 'constants-insert "constants" "Insert constants into source." t)
    (autoload 'constants-get "constants" "Get the value of a constant." t)
    (autoload 'constants-replace "constants" "Replace name of a constant." t)
    (define-key global-map "\C-cci" 'constants-insert)
    (define-key global-map "\C-ccg" 'constants-get)
    (define-key global-map "\C-ccr" 'constants-replace)
    (defvar constants-unit-system 'SI)   ;  this is the default
    ;;
    ;; A default list of constants to insert when none are specified
    (defvar constants-default-list "cc,bk,hp"))
#+end_src

*** Set up my global key bindings
#+begin_src emacs-lisp
  (global-set-key [<F5>] 'semantic-ia-fast-jump)
#+end_src

*** Set up paradox package listing features
Paradox supports starring packages on [[http://github.com]] if the user
has an appropriate github token. Load that token from our secret data
file and set up the paradox environment.

#+begin_src emacs-lisp
  (defun set-up-paradox-variables ()
    "Set up config variables for paradox package ratings."
    (require 'paradox)
    (org-babel-load-file (concat starter-kit-dir "/secret-data.org"))
    (when (functionp 'paradox-list-packages)
      (defvar paradox-github-token)
      (defvar paradox-automatically-star)
      ;; token "paradox emacs packages" (github.com)
      (setq paradox-github-token (secret-data-get-key "paradox-github-token"))
      (setq paradox-automatically-star nil)))
#+end_src

*** Set up alternate interface for yas-snippet
For whatever reason, currently the default interface for `yas-snippet'
pops a window ever-so-briefly which then disappears. Useless. Set up
to use `dropdown-list' instead.

#+begin_src emacs-lisp
  (defun set-up-yas-snippets ()
    (require 'dropdown-list)
    (setq yas-prompt-functions '(yas-dropdown-prompt
                                 yas-ido-prompt
                                 yas-completing-prompt)))
#+end_src


*** Set up elpy mode for python programming
**** TODO Move this to starter-kit-python.org
"elpy" mode is great for python programming. Because it runs a server
in the background, you have to enable it. I also set it up to replace
the flymake checker with flycheck.

#+begin_src emacs-lisp
  (require 'elpy nil t)
  (defun set-up-elpy ()
    "Enable `elpy` package and set up options."
    (when (functionp 'elpy-enable)
      (declare-function elpy-enable "elpy"  (&optional skip-initialize-variables))
      (condition-case err-var
          (elpy-enable)
        (error (message "[Init] (elpy-enable) failed: %s" err-var))))
      ;;(elpy-use-ipython)

    ;;https://github.com/jorgenschaefer/elpy/issues/137
    (when (and (boundp 'elpy-default-minor-modes) (functionp 'flycheck-mode))
      (setq elpy-default-minor-modes (delete 'flymake-mode elpy-default-minor-modes))
      (add-to-list 'elpy-default-minor-modes 'flycheck-mode)))
#+end_src

*** Set up web-beautify hotkeys
The `web-beautify` package provides a useful function for several
modes. For each one, we bind it to "Ctrl-C b".

#+begin_src emacs-lisp
  (defun set-up-web-beautify ()
    "Set up keys to invoke web-beautify in appropriate modes."
    (eval-after-load 'js2-mode
      (lambda ()
        (if (boundp 'js2-mode-map)
            (define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))))
    (eval-after-load 'json-mode
      (lambda ()
        (if (boundp 'json-mode-map)
            (define-key json-mode-map (kbd "C-c b") 'web-beautify-js))))
    (eval-after-load 'sgml-mode
      (lambda ()
        (if (boundp 'html-mode-map)
            (define-key html-mode-map (kbd "C-c b") 'web-beautify-html))))
    (eval-after-load 'css-mode
      (lambda ()
        (if (boundp 'css-mode-map)
            (define-key css-mode-map (kbd "C-c b") 'web-beautify-css)))))

#+end_src

*** Actually call the setup functions
#+begin_src emacs-lisp
  (error-into-message (start-server-if-none))
  (error-into-message (set-up-paradox-variables))
  (error-into-message (set-up-global-undo-tree))
  (error-into-message (set-up-elpy))
  (error-into-message (set-up-web-beautify))
  ;; (error-into-message (set-up-constants))
  (error-into-message (set-up-yas-snippets))
#+end_src

*** Initialize packages if necessary

#+begin_src emacs-lisp
  ;; (error-into-message (smex-initialize))
#+end_src
    
** Set up major mode hooks
*** JavaScript
**** TODO Move this to starter-kit-js.org
For JavaScript, we want to use js2-mode for files with an extension
that would activate js-mode. And, we need js2-mode to be automatically
selected if we edit a file with a she-bang (#!) line that specifies a
JavaScript interpreter.

First, we need a function to perform surgery on global variable
'interpreter-mode-alist' to replace or add an interpreter/mode
association:

#+name: set-interpreter-mode
#+begin_src emacs-lisp
  (defun lloyd-set-interpreter-mode (interpreter-string major-mode)
    "When a file's interpreter is INTERPRETER-STRING, set MAJOR-MODE.

  See Info node `(elisp)Auto Major Mode' and variable `interpreter-mode-alist'."
    (if (assoc interpreter-string interpreter-mode-alist)
        ;; already in list, replace its value
        (setf (cdr (assoc interpreter-string interpreter-mode-alist)) major-mode)
      ;; not in, so add it
      (setq interpreter-mode-alist
              (append interpreter-mode-alist
                      (list (cons interpreter-string major-mode))))))

#+end_src

Then, if js2-mode has loaded successfully, call the function for a
list of "known" JavaScript command-line interpreters. And, replace
associations for file extensions.

#+name: set-up-javascript
#+begin_src emacs-lisp
  (if (functionp 'js2-mode)
      (let ((interp-list '("node" "nodejs" "gjs" "rhino")))
        (mapc (lambda (interp-name)
                (lloyd-set-interpreter-mode (purecopy interp-name) 'js2-mode))
              interp-list)
        ;; replace all the existing file extension associations with 'js2-mode
        (while (rassoc 'javascript-mode auto-mode-alist)
          (setf (cdr (rassoc 'javascript-mode auto-mode-alist)) 'js2-mode))))

#+end_src

*** Add hooks to various modes
Adds setup hooks to various modes that don't have a separate
starter-kit file.

#+begin_src emacs-lisp
  (defun turn-on-flycheck ()
    "Turns on `flycheck-mode.' Exists to prevent use of `lambda' in `add-hook'."
    (flycheck-mode 1))

  (defun turn-on-hs ()
    "Enables `hs-minor-mode'. Exists to prevent use of `lambda' in `add-hook'."
    (hs-minor-mode 1))

  (defun enable-delete-trailing-ws ()
    "Enables automatic deletion of trailing whitespace on save for current buffer."
    (add-hook 'before-save-hook  'delete-trailing-whitespace nil t))

  (defun add-python-mode-hooks ()
    "Add various useful things to `python-mode-hook`"
    (if (fboundp 'flycheck-mode)
        (add-hook 'python-mode-hook 'turn-on-flycheck))
    (if (fboundp 'hs-minor-mode)
        (add-hook 'python-mode-hook 'turn-on-hs))
    (add-hook 'python-mode-hook 'enable-delete-trailing-ws))

  (defun turn-on-pretty-symbols ()
    "Enables `pretty-symbols-mode' for current buffer."
    (if (fboundp 'pretty-symbols-mode)
        (pretty-symbols-mode 1)))

  (defun turn-on-electric-pair-mode ()
    "Enables `electric-pair-mode' for the current buffer."
    (if (fboundp 'electric-pair-mode)
        (electric-pair-mode 1)))

  (defun add-hooks-for-packages ()
    "Set up hooks which depend on packages that need to be initialized by package system."
    (add-python-mode-hooks)
    ;; because ido-ubiquitous doesn't get options right
    (add-hook 'ert-simple-view-mode-hook (lambda () (if (fboundp 'ido-ubiquitous-mode) (ido-ubiquitous-mode 0))))
    (add-hook 'js2-mode-hook 'turn-on-pretty-symbols)
    (add-hook 'js2-mode-hook 'turn-on-electric-pair-mode))

  (add-hooks-for-packages)
#+end_src

*** My version of zap-to-char
This version deletes chars up to but *not* including the character
typed, which I find far more intuitive/useful.

#+begin_src emacs-lisp
  (defun zap-up-to-char (arg char)
    "Kill up to but not including ARGth occurrence of CHAR.
  Case is ignored if `case-fold-search' is non-nil in the current buffer.
  Goes backward if ARG is negative; error if CHAR not found."
    (interactive (list (prefix-numeric-value current-prefix-arg)
                       (read-char "Zap up to char: " t)))
    ;; Avoid "obsolete" warnings for translation-table-for-input.
    (with-no-warnings
      (if (char-table-p translation-table-for-input)
          (setq char (or (aref translation-table-for-input char) char))))
    (kill-region (point) (progn
                           (search-forward (char-to-string char) nil nil arg)
                           (backward-char (cl-signum arg))
                           (point))))

  (global-set-key "\M-z" #'zap-up-to-char)
#+end_src

*** Set `debug-on-error' back to original value.
#+begin_src emacs-lisp
  (setq debug-on-error lloyd-org-orig-debug-on-error)
#+end_src

