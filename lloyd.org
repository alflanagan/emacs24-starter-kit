#+TITLE: A. Lloyd Flanagan User-Specific Settings
#+OPTIONS: toc:2 num:nil ^:nil

* Emacs Setup and Initialization
  :PROPERTIES:
  :tangle:   yes
  :comments: noweb
  :noweb:    yes
  :END:

This file is loaded by starter-kit during execution of
`after-init-hook`. It contains setup of options and packages which are
specific to this user, and not necessarily broadly applicable.

** Declare external functions
To make compiler happy, declare functions defined in other files.

#+name external-functions
#+begin_src emacs-lisp
  (declare-function starter-kit-install-if-needed "starter-kit" (&rest packages))
  (declare-function starter-kit-load "starter-kit" (file &optional header-or-tag))
  (declare-function secret-data-get-key "secret-data"  (some-key &optional file-name))
  (defvar starter-kit-dir)
#+end_src

** Setup debug-on-error for my customizations
#+begin_src emacs-lisp
  (defvar lloyd-org-orig-debug-on-error debug-on-error
    "Stores locally value of `debug-on-error' so that it may be restored.")
  (setq debug-on-error t)

#+end_src

** Install additional packages
There are a whole bunch of packages I use which may not be useful to
everybody.

#+name: my-installed-packages
#+begin_src emacs-lisp
    (defconst lloyds-installed-packages
      '(
        ;; new packages
        ;; these packages are "on probation"
        ;; will be moved to standard list if they work out
        bison-mode              ;; Major mode for editing bison, yacc and lex files.
        buttercup               ;; Behavior-Driven Emacs Lisp Testing 
        cinspect                ;; Use cinspect to look at the CPython source of builtins and other C objects!
        common-lisp-snippets    ;; Yasnippets for Common Lisp 
        doctags                 ;; generate doxygen-style doc comments
        ecb                     ;; a code browser for Emacs 
        elisp-lint              ;; basic linting for Emacs Lisp 
        fold-dwim-org           ;; Fold DWIM bound to org key-strokes. 
        jasminejs-mode          ;; A minor mode for manipulating jasmine test files
        jira-markup-mode        ;; Emacs Major mode for JIRA-markup-formatted text files
        js-doc                  ;; Insert JsDoc style comment easily
        js2-refactor            ;; A JavaScript refactoring library for emacs
        lex                     ;; Lexical analyser construction
        list-utils              ;; List-manipulation utility functions
        niceify-info            ;; improve usability of Info pages
        pep8                    ;; provides pep8 command to run pep8 checker on file in buffer
        projectile              ;; Manage and navigate projects in Emacs easily
        projectile-speedbar     ;; projectile integration for speedbar
        pycoverage              ;; Support for coverage stats on Python 2.X and 3 
        string-utils            ;; String-manipulation utilities

        ;; standard list:
        async                   ;; Asynchronous processing in Emacs (optional paradox dependency)
        cider                   ;; major mode for clojure integration
        coffee-fof              ;; A coffee-mode configuration for `ff-find-other-file'.
        dash                    ;; essential functional programming lib
        dash-functional         ;; Collection of useful combinators for Emacs Lisp
        dropdown-list           ;; Drop-down menu interface
        elpy                    ;; Emacs Python Development Environment
        f                       ;; file system utilities
        flx-ido                 ;; flex integration for ido (better choices for fuzzy match)
        flymake-jshint          ;; making flymake work with JSHint
        golden-ratio            ;; resize windows, aesthetically
        ipretty                 ;; interactive lisp pretty-print
        irfc                    ;; look up IETF RFCs and display in buffer
        jedi                    ;; a Python auto-completion for Emacs
        js2-mode                ;; improved JavaScript support
        json-mode               ;; Major mode for editing JSON files 
        less-css-mode           ;; Major mode for editing LESS CSS files (lesscss.org)
        markdown-mode           ;; Emacs Major mode for Markdown-formatted text files
        org                     ;; newer version of builtin package
        paradox                 ;; enhanced package listing, future std.
        pony-mode               ;; django-admin interaction (nice)
        python-mode             ;; Python major mode 
        s                       ;; The long lost Emacs string manipulation library.
        shrink-whitespace       ;; Whitespace removal DWIM key 
        smartparens             ;; also in starter-kit-lisp
        undo-tree               ;; Treat undo history as a tree (very nice)
        web                     ;; useful HTTP client
        web-beautify            ;; Format HTML, CSS and JavaScript/JSON by js-beautify
        web-mode                ;; major mode for editing html templates

        ;; PROBLEM CHILDREN: early loading causes process to fail
        ;; ac-js2                  ;; Auto-complete source for Js2-mode, with navigation
        ;; ob-lisp                 ;; org-babel functions for common lisp evaluation with SLY or SLIME. 
        magit                   ;; capable git support

        )
      "The set of packages to be automatically installed for me."
      )

    (mapc 'starter-kit-install-if-needed
          lloyds-installed-packages)
#+end_src

** Windows-specific setup
  :PROPERTIES:
  :CUSTOM_ID: windows-specific
  :END:

#+name: windows-specific-setup
#+begin_src emacs-lisp
  ;; html-mode fails on windows if sgml-mode not already present
  (when (equal system-type 'windows-nt)
    (require 'sgml-mode))

#+end_src

** Activate optional parts of starter-kit

#+begin_src emacs-lisp
  (starter-kit-load "eshell")
  ;; starter-kit-js.org still refers to js-mode as "espresso", not valid
  ;; for later versions of emacs
  ;; (starter-kit-load "js")
  (starter-kit-load "nodejs")
  (starter-kit-load "lisp")
  (starter-kit-load "misc-recommended")
  (starter-kit-load "org")
#+end_src

** Setup functions
These functions set up various aspects of the system.

*** Enable undo-tree globally
#+begin_src emacs-lisp
  (defun set-up-global-undo-tree ()
    "Enable `undo-tree` mode wherever it makes sense."
    (when (functionp 'global-undo-tree-mode)
      (global-undo-tree-mode)))

#+end_src

*** Start emacs server process if not already started
#+begin_src emacs-lisp
  (require 'server)
  (defun start-server-if-none ()
    "Start the server processes, unless another process already has."
    ;; test copied from server.el
    (let ((file (expand-file-name "server"
                                  (if server-use-tcp
                                      server-auth-dir
                                    server-socket-dir))))
      (if (not (file-exists-p file))
          (server-start))))
#+end_src

*** Macro to catch errors, turn them into messages
This macro is used to run a function, and catch any errors and display
them as messages. The motivation is that a startup function that
errors may prevent proper startup of emacs, or visiting a file, or
switching to a major mode.

#+begin_src emacs-lisp
  (defmacro error-into-message (body)
    "Catch error in BODY, write message."
    `(condition-case-unless-debug err-data
         ,body
       ;; extract most useful info from err-data structure
       (error  (message "[init] failure! type %s, msg %s in %s."
                          (car err-data)
                          (cdr err-data)
                          (car ',body)))))
#+end_src

*** Set up my global key bindings
#+begin_src emacs-lisp
  (global-set-key [<F5>] 'semantic-ia-fast-jump)
  (global-set-key (kbd "M-\\") 'shrink-whitespace)
  ;; reminder: \C-cl is org-store-link
  (global-set-key "\C-cL" 'org-insert-link-global)
  (global-set-key "\C-co" 'org-open-at-point-global)
  ;; set up with-editor package to set $EDITOR value in children
  (define-key (current-global-map)
    [remap async-shell-command] 'with-editor-async-shell-command)
  (define-key (current-global-map)
    [remap shell-command] 'with-editor-shell-command)
#+end_src

*** Set up paradox package listing features
Paradox supports starring packages on [[http://github.com]] if the user
has an appropriate github token. Load that token from our secret data
file and set up the paradox environment.

#+begin_src emacs-lisp
  (defun set-up-paradox-variables ()
    "Set up config variables for paradox package ratings."
    (if (not (null (require 'paradox nil t)))
        (org-babel-load-file (concat starter-kit-dir "/secret-data.org")))
    (when (functionp 'paradox-list-packages)
      (defvar paradox-github-token) ;;defvars to make compiler happy
      (defvar paradox-automatically-star)
      ;; token "paradox emacs packages" (github.com)
      (setq paradox-github-token (secret-data-get-key "paradox-github-token"))
      (setq paradox-automatically-star nil)))
#+end_src

*** Set up alternate interface for yas-snippet
For whatever reason, currently the default interface for `yas-snippet'
pops a window ever-so-briefly which then disappears. Useless. Set up
to use `dropdown-list' instead.

#+begin_src emacs-lisp
  (defun set-up-yas-snippets ()
    (require 'dropdown-list)
    (setq yas-prompt-functions '(yas-dropdown-prompt
                                 yas-ido-prompt
                                 yas-completing-prompt)))
#+end_src

*** Set up elpy mode for python programming
"elpy" mode is great for python programming. Because it runs a server
in the background, you have to enable it.

#+begin_src emacs-lisp
  (require 'elpy nil t)
  (defun set-up-elpy ()
    "Enable `elpy` package and set up options."
    (when (functionp 'elpy-enable)
      (declare-function elpy-enable "elpy"  (&optional skip-initialize-variables))
      (condition-case err-var
          (elpy-enable)
        (error (message "[Init] (elpy-enable) failed: %s" err-var)))))
#+end_src
**** TODO Move this to starter-kit-python.org
*** Set up web-beautify hotkeys
The `web-beautify` package provides a useful function for several
modes. For each one, we bind it to "Ctrl-C b".

#+begin_src emacs-lisp
  (defun set-up-web-beautify ()
    "Set up keys to invoke web-beautify in appropriate modes."
    (eval-after-load 'js2-mode
      (lambda ()
        (if (boundp 'js2-mode-map)
            (define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))))
    (eval-after-load 'json-mode
      (lambda ()
        (if (boundp 'json-mode-map)
            (define-key json-mode-map (kbd "C-c b") 'web-beautify-js))))
    (eval-after-load 'sgml-mode
      (lambda ()
        (if (boundp 'html-mode-map)
            (define-key html-mode-map (kbd "C-c b") 'web-beautify-html))))
    (eval-after-load 'css-mode
      (lambda ()
        (if (boundp 'css-mode-map)
            (define-key css-mode-map (kbd "C-c b") 'web-beautify-css)))))

#+end_src
*** Set up re-builder package
The default reader for re-builder is not actually the most useful
one. See re-builder docs for details.

#+begin_src emacs-lisp
  (defun fix-re-builder ()
    "Changes annoying default for re-builder package."
    (require 're-builder)
    ;; default reader for re-builder inserts \\s
    (setq reb-re-syntax 'string))
#+end_src

*** Set up CEDET/EDE Options

#+BEGIN_SRC emacs-lisp
  (defun setup-ede-options ()
    "Set up correct options for EDE project management."

    ;; Add further minor-modes to be enabled by semantic-mode.
    ;; See doc-string of `semantic-default-submodes' for other things
    ;; you can use here.
    (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode t)
    (add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode t)
    ;; m3-minor-mode adds useful stuff mouse button 3 (middle) menu
    (if (fboundp 'global-cedet-m3-minor-mode)
        (add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode t))

    ;; Enable Semantic
    (semantic-mode 1)
    ;; Enable EDE
    (global-ede-mode 1)

    ;; Enable EDE (Project Management) features
    (ede-enable-generic-projects)

    (require 'ede/emacs)
    (require 'ede/cpp-root)
    (require 'ede/speedbar)
    (require 'ede/linux)
    (require 'ede/proj-elisp)

    (if (fboundp 'semantic-load-enable-code-helpers)
        (semantic-load-enable-code-helpers)) ; Enable prototype help and smart completion 
    (if (fboundp 'global-srecode-minor-mode)
        (global-srecode-minor-mode 1)) ; Enable template insertion menu

    (require 'semantic/bovine/c)
    (require 'semantic/bovine/gcc)
    (require 'semantic/bovine/el)
    (require 'semantic/wisent/python)
    )
#+END_SRC

*** Actually call the setup functions
#+begin_src emacs-lisp
  (error-into-message (start-server-if-none))
  (error-into-message (set-up-paradox-variables))
  (error-into-message (set-up-global-undo-tree))
  (error-into-message (set-up-elpy))
  (error-into-message (set-up-web-beautify))
  (error-into-message (set-up-yas-snippets))
  (error-into-message (fix-re-builder))
#+end_src

** Set up major mode hooks
*** JavaScript
**** TODO Move this to starter-kit-js.org
For JavaScript, we want to use js2-mode for files with an extension
that would activate js-mode. And, we need js2-mode to be automatically
selected if we edit a file with a she-bang (#!) line that specifies a
JavaScript interpreter.

First, we need a function to perform surgery on global variable
'interpreter-mode-alist' to replace or add an interpreter/mode
association:

#+name: set-interpreter-mode
#+begin_src emacs-lisp
  (defun lloyd-set-interpreter-mode (interpreter-string major-mode)
    "When a file's interpreter is INTERPRETER-STRING, set MAJOR-MODE.

  See Info node `(elisp)Auto Major Mode' and variable `interpreter-mode-alist'."
    (if (assoc interpreter-string interpreter-mode-alist)
        ;; already in list, replace its value
        (setf (cdr (assoc interpreter-string interpreter-mode-alist)) major-mode)
      ;; not in, so add it
      (setq interpreter-mode-alist
              (append interpreter-mode-alist
                      (list (cons interpreter-string major-mode))))))

#+end_src

Then, if js2-mode has loaded successfully, call the function for a
list of "known" JavaScript command-line interpreters. And, replace
associations for file extensions.

#+name: set-up-javascript
#+begin_src emacs-lisp
  (if (functionp 'js2-mode)
      (let ((interp-list '("node" "nodejs" "gjs" "rhino")))
        (mapc (lambda (interp-name)
                (lloyd-set-interpreter-mode (purecopy interp-name) 'js2-mode))
              interp-list)
        ;; replace all the existing file extension associations with 'js2-mode
        (while (rassoc 'javascript-mode auto-mode-alist)
          (setf (cdr (rassoc 'javascript-mode auto-mode-alist)) 'js2-mode))))

    (defun turn-on-electric-pair-mode ()
      "Enables `electric-pair-mode' for the current buffer."
      (if (fboundp 'electric-pair-mode)
          (electric-pair-mode 1)))

  (defun set-up-js2-mode ()
    "Enable options for js2 (Javascript) mode."
    (electric-indent-local-mode 0)  ;; fails epically.
    (turn-on-electric-pair-mode)
    (company-mode)
    (js2-refactor-mode)  ;; check out js2r-xxx functions!
    (hs-minor-mode))

  (if (functionp 'js2-mode)
      (add-hook 'js2-mode-hook 'set-up-js2-mode))
#+end_src

*** web-mode
#+begin_src emacs-lisp
  (eval-after-load 'web-mode
    (lambda ()
      (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))))
#+end_src

*** Add hooks to various modes
Adds setup hooks to various modes that don't have a separate
starter-kit file.

#+begin_src emacs-lisp
  (defun turn-on-hs ()
    "Enables `hs-minor-mode'. Exists to prevent use of `lambda' in `add-hook'."
    (hs-minor-mode 1))

  (defun enable-delete-trailing-ws ()
    "Enables automatic deletion of trailing whitespace on save for current buffer."
    (add-hook 'before-save-hook  'delete-trailing-whitespace nil t))

  (defun add-python-mode-hooks ()
    "Add various useful things to `python-mode-hook`"
    (if (fboundp 'hs-minor-mode)
        (add-hook 'python-mode-hook 'turn-on-hs))
    (add-hook 'python-mode-hook 'enable-delete-trailing-ws))

  (defun add-hooks-for-packages ()
    "Set up hooks which depend on packages that need to be initialized by package system."
    (add-python-mode-hooks)
    ;; because ido-ubiquitous doesn't get options right
    (add-hook 'ert-simple-view-mode-hook (lambda () (if (fboundp 'ido-ubiquitous-mode) (ido-ubiquitous-mode 0))))
    (add-hook 'Info-selection-hook (lambda () (niceify-info))))

  (add-hooks-for-packages)
#+end_src

*** My version of zap-to-char
This version deletes chars up to but *not* including the character
typed, which I find far more intuitive/useful.

#+begin_src emacs-lisp
  (defun zap-up-to-char (arg char)
    "Kill up to but not including ARGth occurrence of CHAR.
  Case is ignored if `case-fold-search' is non-nil in the current buffer.
  Goes backward if ARG is negative; error if CHAR not found."
    (interactive (list (prefix-numeric-value current-prefix-arg)
                       (read-char "Zap up to char: " t)))
    ;; Avoid "obsolete" warnings for translation-table-for-input.
    (with-no-warnings
      (if (char-table-p translation-table-for-input)
          (setq char (or (aref translation-table-for-input char) char))))
    (kill-region (point) (progn
                           (search-forward (char-to-string char) nil nil arg)
                           (backward-char (cl-signum arg))
                           (point))))

  (global-set-key "\M-z" #'zap-up-to-char)
#+end_src

*** Set `debug-on-error' back to original value.
#+begin_src emacs-lisp
  (setq debug-on-error lloyd-org-orig-debug-on-error)
#+end_src
